
import pandas as pd
from time import sleep


"""
This is the engine file for the power model, it keeps track of the power generated by the solar panels

Input: the CSV data (currently)

Output: the power generated on a timely basis (updates every 2 mins)

"""
# Define the filepath variable
filepath = r"Insert the filepath"

# Specific column names for your data
time_column = "Time (UTCG)"
power_column = "Power (W)"

  
running_total = 0 # Initialize (if using global variable)

def get_running_total():
    """Retrieves the current running total of power generated."""
    global running_total  # Access the global variable (if using global variable)
    return running_total


      

  
def process_csv_data(filepath):
  """
  This function reads solar power data from a CSV file.

  Args:
      filepath: Path to the CSV file containing solar power data.

  Returns:
      A pandas DataFrame containing time and solar power data (or raises an error).
  """
  # Read the CSV file using pandas
  try:
      data = pd.read_csv(filepath)
  except FileNotFoundError as e:
      print(f"Error: File not found - {e}")
      return None
  except pd.errors.ParserError as e:
      print(f"Error: Parsing error in CSV - {e}")
      return None


  # Check if time and power columns exist
  if not (time_column in data.columns and power_column in data.columns):
      print(f"Error: Columns '{time_column}' and '{power_column}' not found in CSV")
      return None

  # Return a DataFrame containing the time and solar power data
  return data[[time_column, power_column]]

def main(running_total=0):
  # Read and process CSV data
  solar_data = process_csv_data(filepath)
  # Check if data was successfully retrieved (consider adding data validation)
  if solar_data is None:
      return

  # Iterate through all values
  for index, row in solar_data.iterrows():
      time = row[time_column]
      solar_power = row[power_column]
      
      #add the power generated to the running total
      running_total+=solar_power
      
    
      # Process individual time and solar power values here
      print(f"Time: {time}, Solar Power: {solar_power} W, running total= {running_total}")


if __name__ == "__main__":
  main()


